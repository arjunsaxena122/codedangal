// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum Status {
  ACCEPTED
  WRONG
}

model Avatar {
  id        String   @id @default(cuid())
  url       String   @default("https://placehold.co/600x400")
  localPath String   @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                      String          @id @default(cuid())
  username                String?         @unique
  fullname                String?
  email                   String          @unique
  password                String
  isEmailVerified         Boolean         @default(false)
  role                    Role            @default(USER)
  emailVerificationToken  String?
  emailVerificationExpiry DateTime?
  forgetPasswordToken     String?
  forgetPasswordExpiry    DateTime?
  refreshToken            String?
  createdAt               DateTime        @default(now())
  updatedAt               DateTime        @updatedAt
  avatar                  Avatar?
  Problem                 Problem[]
  Submission              Submission[]
  ProblemSolved           ProblemSolved[]
  Playlist                Playlist[]
}

model Problem {
  id                 String     @id @default(cuid())
  userId             String
  title              String     @unique
  description        String
  difficulty         Difficulty
  tags               String[]
  examples           Json
  constraints        String
  hints              String?
  editorial          String?
  testCases          Json
  codeSnippets       Json
  referenceSolutions Json
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt

  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  Submission        Submission[]
  ProblemSolved     ProblemSolved[]
  ProblemInPlaylist ProblemInPlaylist[]
}

model Submission {
  id             String           @id @default(cuid())
  userId         String
  problemId      String
  sourceCode     Json
  language       String
  stdin          String?
  stdout         String?
  stderr         String?
  compileOutput  String?
  status         Status
  memory         String?
  time           String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem        Problem          @relation(fields: [problemId], references: [id], onDelete: Cascade)
  TestCaseResult TestCaseResult[]
}

model TestCaseResult {
  id             String   @id @default(cuid())
  submissionId   String
  testCases      Int
  stdin          String?
  stdout         String?
  expectedOutput String?
  stderr         String?
  compileOutput  String?
  status         Status
  memory         String?
  time           String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  submission Submission @relation(fields: [submissionId], references: [id])

  @@index([submissionId])
}

model ProblemSolved {
  id        String   @id @default(cuid())
  userId    String
  problemId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([userId, problemId])
}

model Playlist {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId            String
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  ProblemInPlaylist ProblemInPlaylist[]

  @@unique([name, userId])
}

model ProblemInPlaylist {
  id         String   @id @default(cuid())
  playlistId String
  problemId  String @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  playlist   Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  problem    Problem  @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([playlistId,problemId])
}
